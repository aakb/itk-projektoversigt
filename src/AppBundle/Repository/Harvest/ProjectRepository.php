<?php

namespace AppBundle\Repository\Harvest;

/**
 * ProjectRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProjectRepository extends BaseRepository {

	public function findAllOwnedByValues() {
		$qb = $this->getEntityManager()->createQueryBuilder();

		$query = $qb->select( 'count(p.ownedBy) as count, p.ownedBy' )
		            ->from( 'AppBundle:Harvest\Project', 'p' )
		            ->groupBy( 'p.ownedBy' )
		            ->getQuery();

		return $query->getResult();
	}

	public function findBySearchData( array $data = null ) {
		$qb = $this->getEntityManager()->createQueryBuilder();

		$qb->select( 'p', 'c' )
		   ->from( 'AppBundle:Harvest\Project', 'p' )
		   ->leftJoin( 'p.client', 'c' )
		   ->orderBy( 'p.ownedBy', 'ASC' );

		if ( $data ) {
			$parameters = [];
			foreach ( $data as $key => $value ) {
				if ( $value ) {
					switch ( $key ) {
						case 'ownedBy':
							$qb->andWhere( 'p.' . $key . ' IN (:' . $key . ')' );
							$parameters[ $key ] = $value;
							break;
						case 'name':
							$qb->andWhere( 'p.' . $key . ' LIKE :' . $key );
							$parameters[ $key ] = '%' . $value . '%';
							break;
						case 'isActive':
							$qb->andWhere( 'p.' . $key . ' = :' . $key );
							$parameters[ $key ] = true;
							break;
						case 'type':
							foreach ( $value as $v ) {
								switch ( $v ) {
									case 'non_billable':
										$qb->andWhere( 'p.isFixedFee = :non_billable1 AND p.isBillable = :non_billable2' );
										$parameters['non_billable1'] = false;
										$parameters['non_billable2'] = false;
										break;
									case 'fixed':
										$qb->andWhere( 'p.isFixedFee = :fixed1 AND p.isBillable = :fixed2' );
										$parameters['fixed1'] = true;
										$parameters['fixed2'] = true;
										break;
									case 'time':
										$qb->andWhere( 'p.isFixedFee = :time1 AND p.isBillable = :time2' );
										$parameters['time1'] = false;
										$parameters['time2'] = true;
										break;
								}
							}
					}
				}
			}
			$qb->setParameters( $parameters );
		}

		$query = $qb->getQuery();

		return $query->getResult();
	}
}
